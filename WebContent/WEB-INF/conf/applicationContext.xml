<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">


	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesMode" value="2"></property>
		<property name="locations">
			<value>classpath:config.properties
			</value>
		</property>
	</bean>

	<bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${di.datasource.driverClass}" />
		<property name="jdbcUrl" value="${di.datasource.jdbcUrl}" />
		<property name="user" value="${di.datasource.user}" />
		<property name="password" value="${di.datasource.password}" />
		<property name="initialPoolSize">
			<value>${di.datasource.initialPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${di.datasource.minPoolSize}</value>
		</property>
		<property name="maxPoolSize">
			<value>${di.datasource.maxPoolSize}</value>
		</property>
		<property name="maxIdleTime">
			<value>${di.datasource.maxIdleTime}</value>
		</property>
		<property name="checkoutTimeout">
			<value>${di.datasource.checkoutTimeout}</value>
		</property>
		<property name="preferredTestQuery">
			<value>select 0 from dual</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>true</value>
		</property>
	</bean>

	<!-- 配置SessionFactory,由Spring容器来管理Hibernate -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<!-- 配置自动扫描包下的实体，也可使用annotatedClasses属性进行单个实体配置 -->
		<property name="packagesToScan" value="model"></property>
		<!-- 配置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${di.hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.jdbc.batch_size">30</prop>
				<!-- 自动建表 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="alter*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="do*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="move*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="register*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="check*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="sync*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置参与事务的类或方法 -->
	<aop:config>
		<aop:pointcut id="allogicMethod" expression="execution(* persist.*.*(..))" />
		<aop:advisor pointcut-ref="allogicMethod" advice-ref="txAdvice" />
	</aop:config>
	<aop:aspectj-autoproxy />

	<!-- 让Spring通过自动扫描来查询和管理Bean -->
<!-- 	<context:component-scan base-package="controller" /> -->
	<context:component-scan base-package="persist" />
	<context:component-scan base-package="service" />
	
	



</beans>
